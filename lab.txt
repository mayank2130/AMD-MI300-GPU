import os
from openai import OpenAI
import json
from vllm import SamplingParams
import json
from datetime import datetime, timezone, timedelta
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from flask import Flask, request, jsonify
from threading import Thread
import json

BASE_URL = f"http://localhost:3000/v1"
MODEL_PATH = "/home/user/Models/deepseek-ai/deepseek-llm-7b-chat"

client = OpenAI(api_key="NULL", base_url=BASE_URL, timeout=None, max_retries=0)

class AI_AGENT:
    def __init__(self, client, MODEL_PATH):
        self.base_url = BASE_URL
        self.model_path = MODEL_PATH

    def parse_email(self, email_text):
        response = client.chat.completions.create(
            model=self.model_path,
            temperature=0.0,
            messages=[{
                "role": "user",
                "content": f"""
                Yor are an Agent that helps in scheduling meetings.
                Your job is to extracts Email ID's and Meeting Duration.
                You should return :
                1. List of email id's of participants (comma-separated).
                2. Meeting duration in minutes.
                3. Time constraints (e.g., 'next week').
                If the List of email id's of participants are just names, then append @amd.com at the end and return.
                Return as json with 'participants', 'time_constraints' & 'meeting_duration'.
                Stricty follow the instructions. Strictly return dict with participents email id's, time constraints & meeting duration in minutes only. 
                Don not add any other information. 
                
                Email: {email_text}
                
                """
            }]
        )
        return json.loads(response.choices[0].message.content)


def retrive_calendar_events(user, start, end):
    events_list = []
    token_path = "../Keys/"+user.split("@")[0]+".token"
    user_creds = Credentials.from_authorized_user_file(token_path)
    calendar_service = build("calendar", "v3", credentials=user_creds)
    events_result = calendar_service.events().list(calendarId='primary', timeMin=start,timeMax=end,singleEvents=True,orderBy='startTime').execute()
    events = events_result.get('items')
    
    for event in events : 
        attendee_list = []
        try:
            for attendee in event["attendees"]: 
                attendee_list.append(attendee['email'])
        except: 
            attendee_list.append("SELF")
        start_time = event["start"]["dateTime"]
        end_time = event["end"]["dateTime"]
        events_list.append(
            {"StartTime" : start_time, 
             "EndTime": end_time, 
             "NumAttendees" :len(set(attendee_list)), 
             "Attendees" : list(set(attendee_list)),
             "Summary" : event["summary"]})
    return events_list


app = Flask(__name__)
received_data = []

user_list = ["userone.amd@gmail.com","usertwo.amd@gmail.com","userthree.amd@gmail.com"]
meeting_list = []

for email in user_list:
    event = retrive_calendar_events(email, '2025-07-17T00:00:00+05:30', '2025-07-17T23:59:59+05:30')
    # Create a dictionary with email and corresponding events
    meeting_list.append({"email": email, "events": event})

meeting_list


import json
from datetime import datetime, timedelta
import re
import uuid

# --- Precompiled Regex Patterns ---

DURATION_REGEX = re.compile(r'(\d+)\s*(minute|hour)s?', re.IGNORECASE)

MONTH_NAMES = '|'.join([
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December',
    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
])

DATE_PATTERNS = [
    (re.compile(rf'\b(\d{{1,2}})(?:st|nd|rd|th)?\s+({MONTH_NAMES})\b', re.IGNORECASE), 'day_month'),
    (re.compile(rf'\b({MONTH_NAMES})\s+(\d{{1,2}})(?:st|nd|rd|th)?\b', re.IGNORECASE), 'month_day'),
    (re.compile(r'\b(\d{1,2})[/-](\d{1,2})\b'), 'numeric_date'),
    (re.compile(r'\b(\d{4})-(\d{1,2})-(\d{1,2})\b'), 'year_month_day'),
    (re.compile(r'\b(\d{1,2})-(\d{1,2})-(\d{4})\b'), 'day_month_year'),
    (re.compile(r'\b(\d{4})/(\d{1,2})/(\d{1,2})\b'), 'year_month_day_slash'),
    (re.compile(r'\b(\d{1,2})/(\d{1,2})/(\d{4})\b'), 'month_day_year'),
    (re.compile(r'\b(\d{1,2})\.(\d{1,2})\.(\d{4})\b'), 'day_month_year_dot'),
    (re.compile(r'\b(\d{1,2})\.(\d{1,2})\b'), 'numeric_date_dot'),
]

DAY_NAME_REGEX = re.compile(r'\b(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday)\b', re.IGNORECASE)

# Debug flag
DEBUG = False

# --- Functions ---

def parse_email_content(email_content):
    duration_mins = None
    requested_date = None
    parse_type = None

    duration_match = DURATION_REGEX.search(email_content)
    if duration_match:
        value = int(duration_match.group(1))
        duration_mins = value * 60 if duration_match.group(2).lower() == 'hour' else value

    for pattern, pattern_type in DATE_PATTERNS:
        date_match = pattern.search(email_content)
        if date_match:
            try:
                requested_date = parse_date_from_match(date_match, pattern_type)
                if requested_date:
                    parse_type = 'specific_date'
                    return duration_mins, requested_date, parse_type
            except Exception:
                continue

    day_match = DAY_NAME_REGEX.search(email_content)
    if day_match:
        requested_date = day_match.group(1).capitalize()
        parse_type = 'day_name'

    return duration_mins, requested_date, parse_type

def parse_date_from_match(match, pattern_type):
    current_year = datetime.now().year
    months = {
        'january': 1, 'february': 2, 'march': 3, 'april': 4, 'may': 5, 'june': 6,
        'july': 7, 'august': 8, 'september': 9, 'october': 10, 'november': 11, 'december': 12,
        'jan': 1, 'feb': 2, 'mar': 3, 'apr': 4, 'may': 5, 'jun': 6,
        'jul': 7, 'aug': 8, 'sep': 9, 'oct': 10, 'nov': 11, 'dec': 12
    }
    groups = match.groups()
    year = current_year

    if pattern_type == 'day_month':
        day = int(groups[0])
        month = months[groups[1].lower()]
    elif pattern_type == 'month_day':
        month = months[groups[0].lower()]
        day = int(groups[1])
    elif pattern_type in ['year_month_day', 'year_month_day_slash']:
        year, month, day = int(groups[0]), int(groups[1]), int(groups[2])
    elif pattern_type in ['day_month_year', 'day_month_year_dot']:
        day, month, year = int(groups[0]), int(groups[1]), int(groups[2])
    elif pattern_type == 'month_day_year':
        month, day, year = int(groups[0]), int(groups[1]), int(groups[2])
    elif pattern_type in ['numeric_date', 'numeric_date_dot']:
        day, month = int(groups[0]), int(groups[1])
        if month > 12 and day <= 12:
            day, month = month, day
    else:
        return None

    parsed_date = datetime(year, month, day)

    if pattern_type in ['day_month', 'month_day', 'numeric_date', 'numeric_date_dot']:
        if parsed_date.date() < datetime.now().date():
            parsed_date = datetime(year + 1, month, day)

    return parsed_date

def get_next_day_of_week(start_date, target_day_name):
    days_of_week = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
    try:
        target_index = days_of_week.index(target_day_name)
    except ValueError:
        return None

    current_index = start_date.weekday()
    delta = (target_index - current_index + 7) % 7
    return start_date + timedelta(days=delta)

def is_time_slot_available(attendees_to_check, proposed_start, proposed_end, all_attendee_schedules):
    attendee_schedules_map = {item['email']: item['events'] for item in all_attendee_schedules}

    for attendee in attendees_to_check:
        email = attendee.get("email")
        if not email or email not in attendee_schedules_map:
            continue

        for busy in attendee_schedules_map[email]:
            try:
                busy_start = datetime.fromisoformat(busy["StartTime"]).replace(tzinfo=None)
                busy_end = datetime.fromisoformat(busy["EndTime"]).replace(tzinfo=None)
                if proposed_start < busy_end and proposed_end > busy_start:
                    if DEBUG:
                        print(f"Collision for {email}: {proposed_start} overlaps with {busy_start} - {busy_end}")
                    return False
            except Exception:
                continue
    return True

def your_meeting_assistant(data, global_attendee_schedules):
    output = data.copy()
    output["MetaData"] = {}

    if not output.get("Request_id"):
        output["Request_id"] = str(uuid.uuid4())
        output["MetaData"]["Request_id_Generated"] = True
        if DEBUG:
            print(f"Generated Request_id: {output['Request_id']}")

    request_datetime_str = output.get("Datetime")
    email_content = output.get("EmailContent", "")
    request_attendees = output.get("Attendees", [])

    if not request_datetime_str:
        output.update({"EventStart": "Error", "EventEnd": "Error", "Duration_mins": "Error"})
        output["MetaData"]["Error"] = "Missing 'Datetime'"
        return output

    try:
        request_dt = datetime.strptime(request_datetime_str, "%d-%m-%YT%H:%M:%S")
    except Exception as e:
        output.update({"EventStart": "Error", "EventEnd": "Error", "Duration_mins": "Error"})
        output["MetaData"]["Error"] = f"Invalid Datetime: {e}"
        return output

    duration_mins, requested_date_info, parse_type = parse_email_content(email_content)

    if duration_mins is None:
        duration_mins = 30
        output["MetaData"]["DurationParseWarning"] = "Defaulted to 30 mins."

    if parse_type == 'specific_date':
        target_date = requested_date_info
    elif parse_type == 'day_name':
        target_date = get_next_day_of_week(request_dt, requested_date_info)
    else:
        target_date = request_dt
        output["MetaData"]["DateParseWarning"] = "Defaulted to request date."

    if not target_date:
        output.update({"EventStart": "Error", "EventEnd": "Error", "Duration_mins": str(duration_mins)})
        output["MetaData"]["Error"] = "Invalid target date."
        return output

    target_date = target_date.replace(hour=0, minute=0, second=0, microsecond=0)

    working_hours = (9, 17)
    found_slot = False

    for day_offset in range(7):
        current_date = target_date + timedelta(days=day_offset)
        if current_date.weekday() >= 5:
            continue

        for hour in range(working_hours[0], working_hours[1]):
            for minute in [0, 30]:
                proposed_start = current_date.replace(hour=hour, minute=minute)
                proposed_end = proposed_start + timedelta(minutes=duration_mins)

                if proposed_end.hour > working_hours[1] or proposed_end.date() != proposed_start.date():
                    continue

                if is_time_slot_available(request_attendees, proposed_start, proposed_end, global_attendee_schedules):
                    output["EventStart"] = proposed_start.strftime("%Y-%m-%dT%H:%M:%S")
                    output["EventEnd"] = proposed_end.strftime("%Y-%m-%dT%H:%M:%S")
                    output["Duration_mins"] = str(duration_mins)
                    found_slot = True
                    break
            if found_slot:
                break
        if found_slot:
            break

    if found_slot:
        final_attendees = []
        emails_in_meeting = [a['email'] for a in request_attendees]
        summary = output.get("Subject", "Scheduled Meeting")

        for attendee in global_attendee_schedules:
            events = attendee['events'][:]
            if attendee['email'] in emails_in_meeting:
                events.append({
                    "StartTime": output["EventStart"],
                    "EndTime": output["EventEnd"],
                    "NumAttendees": len(emails_in_meeting),
                    "Attendees": emails_in_meeting,
                    "Summary": summary
                })
            final_attendees.append({"email": attendee['email'], "events": events})
        output["Attendees"] = final_attendees
    else:
        output.update({"EventStart": "No available slot found", "EventEnd": "No available slot found", "Duration_mins": str(duration_mins)})
        output["MetaData"]["Status"] = "No slot found in next 7 days."

    return output

def update_meeting_list_with_new_events(meeting_list, output_data):
    """
    Updates the meeting_list with new events from the output data
    Maintains the current format of meeting_list
    """
    # Extract attendees from output data
    output_attendees = output_data.get('Attendees', [])
    
    for output_attendee in output_attendees:
        email = output_attendee.get('email')
        events = output_attendee.get('events', [])
        
        # Find the corresponding user in meeting_list
        user_found = False
        for meeting_user in meeting_list:
            if meeting_user['email'] == email:
                # Update existing user's events
                meeting_user['events'] = events
                user_found = True
                break
        
        # If user not found in meeting_list, add them
        if not user_found:
            meeting_list.append({
                'email': email,
                'events': events
            })
    
    return meeting_list

# Add this after creating your Flask app instance
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
    response.headers.add('Access-Control-Allow-Credentials', 'true')
    return response

# Add OPTIONS handler for preflight requests
@app.route('/receive', methods=['OPTIONS'])
def receive_options():
    return jsonify({'status': 'OK'})

# Updated route with meeting_list synchronization
@app.route('/receive', methods=['POST'])
def receive():
    global meeting_list  # Ensure we're modifying the global variable
    try:
        data = request.get_json()
        
        # Call your meeting assistant
        new_data = your_meeting_assistant(data, meeting_list)
        
        # Update the global meeting_list with new events
        meeting_list = update_meeting_list_with_new_events(meeting_list, new_data)
        
        # Store the received data
        received_data.append(data)
        
        print(f"\n\n\n Output:\n {json.dumps(new_data, indent=2)}")
        print(f"\n\n\n Updated meeting_list:\n {json.dumps(meeting_list, indent=2)}")
        
        return jsonify(new_data)
    except Exception as e:
        print(f"Error in receive endpoint: {str(e)}")
        return jsonify({"error": str(e), "status": "failed"}), 400

def run_flask():
    app.run(host='0.0.0.0', port=5000)

# Start Flask in a background thread
Thread(target=run_flask, daemon=True).start()
